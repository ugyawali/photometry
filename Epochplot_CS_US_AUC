%% Fiber Photometry Epoch Averaging Example
% 
% <html>
% This example goes through fiber photometry analysis using techniques <br>
% such as data smoothing, bleach detrending, and z-score analysis. <br>
% The epoch averaging was done using TDTfilter. <br><br>
% Author Contributions: <br>
% TDT, David Root, and the Morales Lab contributed to the writing and/or conceptualization of the code. <br>
% The signal processing pipeline was inspired by the workflow developed by <a href="https://doi.org/10.1016/j.celrep.2017.10.066">David Barker et al. (2017)</a> for the Morales Lab. <br>
% The data used in the example were provided by David Root. <br><br>
% Author Information: <br>
% David H. Root <br>
% Assistant Professor <br>
% Department of Psychology & Neuroscience <br>
% University of Colorado, Boulder <br>
% Lab Website: <a href="https://www.root-lab.org">https://www.root-lab.org</a> <br>
% david.root@colorado.edu <br><br>
% About the authors: <br>
% The Root lab and Morales lab investigate the neurobiology of reward, aversion, addiction, and depression. <br>
% <br> TDT edits all user submissions in coordination with the contributing
% author(s) prior to publishing.
% </html>


%%hist_trial_a = smooth(mean(hist_trial_a,1),3);
% hist_trial_a_first = smooth2(mean(hist_trial_a_first,1),9);
%% Housekeeping
% Clear workspace and close existing figures.
% Add data
clear all; clc; clf;
data = TDTbin2mat('//Users/owner/Documents/MATLAB analysis/', 'TYPE', {'epocs', 'scalars', 'streams'}); 
%% Remove Last Reward Value
% data.epocs.RwA_.onset(end)=[];
% data.epocs.RwA_.offset(end)=[];
% data.epocs.AtA_.data(end)=[];
%% Setup the variables for the data you want to extract
% We will extract two different stream stores surrounding the 'PtAB' epoch 
% event. We are interested in a specific event code for the shock onset.

REF_EPOC = 'RwB/'; % Stimulation event to center on% RwB is CS-
%STIM_EPOC = 'AtA/'; %Stimulation pulses
STREAM_STORE1 = 'x40BB' % name of the 405 store 'v2_B''x405A' x40BB or AA
STREAM_STORE2 = 'x47BB' % name of the 470 store 'b2_B' 'x470A'
TRANGE = [-15 25]; %window size [start time relative to epoc onset, entire duration]-14 16 for CS+ 
ARANGE = [1 1];
BASELINE_PER = [-15 -10]; % baseline period before stim -14 -10 for CS+
ARTIFACT405 = Inf;% variable created for artifact removal for 405 store
ARTIFACT470 = Inf;% variable created for artifact removal for 470 store
% Use TDTfilter to extract data around our epoc event
% Using the 'TIME' parameter extracts data only from the time range around
% our epoc event. Use the 'VALUES' parameter to specify allowed values of
% the REF_EPOC to extract.  For stream events, the chunks of data are 
% stored in cell arrays structured as data.streams.(STREAM_STORE1).filtered

%filtering out the epoch of interest
data = TDTfilter(data, REF_EPOC, 'TIME', TRANGE);  
% data = TDTfilter(data, 'AtB/', 'TIME', TRANGE);
% 
% comboData = timerange2(data.time_ranges, data.time_ranges, 'AND');
% data = TDTbin2mat('/Users/owner/Documents/MATLAB analysis', 'RANGES', comboData);
%data = TDTfilter(data, 'RwA/', 'TIME', TRANGE);

%%
% Optionally remove artifacts. If any waveform is above ARTIFACT level, or
% below -ARTIFACT level, remove it from the data set.
art1 = ~cellfun('isempty', cellfun(@(x) x(x>ARTIFACT405), data.streams.(STREAM_STORE1).filtered, 'UniformOutput',false));
good = ~art1;

data.streams.(STREAM_STORE1).filtered = data.streams.(STREAM_STORE1).filtered(good);
 
art2 = ~cellfun('isempty', cellfun(@(x) x(x>ARTIFACT470), data.streams.(STREAM_STORE2).filtered, 'UniformOutput',false));

good2 = ~art2;
data.streams.(STREAM_STORE2).filtered = data.streams.(STREAM_STORE2).filtered(good2);
 
numArtifacts = sum(~good) + sum(~good2);

%%
% Applying a time filter to a uniformly sampled signal means that the
% length of each segment could vary by one sample.  Let's find the minimum
% length so we can trim the excess off before calculating the mean.
%data405 = data.streams.(STREAM_STORE1).filtered
%data470 = data.streams.STREAM_STORE2.filtered

minLength1 = min(cellfun('prodofsize', data.streams.(STREAM_STORE1).filtered));
minLength2 = min(cellfun('prodofsize', data.streams.(STREAM_STORE2).filtered));
data.streams.(STREAM_STORE1).filtered = cellfun(@(x) x(1:minLength1), data.streams.(STREAM_STORE1).filtered, 'UniformOutput',false);
data.streams.(STREAM_STORE2).filtered = cellfun(@(x) x(1:minLength2), data.streams.(STREAM_STORE2).filtered, 'UniformOutput',false);

allSignals = cell2mat(data.streams.(STREAM_STORE1).filtered');

% downsample 10x and average 405 signal
N = 10;
F405 = zeros(size(allSignals(:,1:N:end-N+1)));
for ii = 1:size(allSignals,1)
    F405(ii,:) = arrayfun(@(i) mean(allSignals(ii,i:i+N-1)),1:N:length(allSignals)-N+1);
end
minLength1 = size(F405,2);

% Create mean signal, standard error of signal, and DC offset of 405 signal
meanSignal1 = mean(F405);
stdSignal1 = std(double(F405))/sqrt(size(F405,1));
dcSignal1 = mean(meanSignal1);

% downsample 10x and average 465 signal
allSignals = cell2mat(data.streams.(STREAM_STORE2).filtered');
F465 = zeros(size(allSignals(:,1:N:end-N+1)));
for ii = 1:size(allSignals,1)
    F465(ii,:) = arrayfun(@(i) mean(allSignals(ii,i:i+N-1)),1:N:length(allSignals)-N+1);
end
minLength2 = size(F465,2);

% Create mean signal, standard error of signal, and DC offset of 465 signal
meanSignal2 = mean(F465);
stdSignal2 = std(double(F465))/sqrt(size(F465,1));
dcSignal2 = mean(meanSignal2);

%% Plot Epoch Averaged Response

% Create the time vector for each stream store
ts1 = TRANGE(1) + (1:minLength1) / data.streams.(STREAM_STORE1).fs*N;
ts2 = TRANGE(1) + (1:minLength2) / data.streams.(STREAM_STORE2).fs*N;

% Subtract DC offset to get signals on top of one another
meanSignal1 = meanSignal1 - dcSignal1;
meanSignal2 = meanSignal2 - dcSignal2;
%size(ts1)
%size(meanSignal1)
% Plot the 405 and 465 average signals
figure(1);
subplot(3,1,1);
plot(ts1, meanSignal1, 'color',[0.4660, 0.6740, 0.1880], 'LineWidth', 3); hold on;
plot(ts2, meanSignal2, 'color',[0.8500, 0.3250, 0.0980], 'LineWidth', 3); 

% Plot vertical line at epoch onset, time = 0
line([0 0], [(min(F465(:) - dcSignal2)), ((max(F465(:)) - dcSignal2))], 'Color', [.7 .7 .7], 'LineStyle','-', 'LineWidth', 3)

% Create the standard error bands for the 405 signal
XX = [ts1, fliplr(ts1)];
YY = [meanSignal1 + stdSignal1, fliplr(meanSignal1 - stdSignal1)];

% Plot filled standard error bands.
h = fill(XX, YY, 'g');
set(h, 'facealpha',.25,'edgecolor','none')

% Repeat for 465
XX = [ts2, fliplr(ts2)];
YY = [meanSignal2 + stdSignal2, fliplr(meanSignal2 - stdSignal2)];
h = fill(XX, YY, 'r');
set(h, 'facealpha',.25,'edgecolor','none')

% Finish up the plot
axis tight
xlabel('Time, s','FontSize',12)
ylabel('mV', 'FontSize', 12)
title(sprintf('Reward',numel(data.streams.(STREAM_STORE1).filtered), numArtifacts),'FontSize', 14)
set(gcf, 'Position',[100, 100, 800, 500])

% Heat Map based on z score of 405 fit subtracted 465
% Fitting 405 channel onto 465 channel to detrend signal bleaching
% Scale and fit data
% Algorithm sourced from Tom Davidson's Github:
% https://github.com/tjd2002/tjd-shared-code/blob/master/matlab/photometry/FP_normalize.m

bls = polyfit(F465(1:end), F405(1:end), 1);
size(F465);
size(F405);
Y_fit_all = bls(1) .* F405 + bls(2);
Y_dF_all = F465 - Y_fit_all;

zall = zeros(size(Y_dF_all));
for i = 1:size(Y_dF_all,1)
    ind = ts2(1,:) < BASELINE_PER(2) & ts2(1,:) > BASELINE_PER(1);
    zb = mean(Y_dF_all(i,ind)); % baseline period mean (-10sec to -6sec)
    zsd = std(Y_dF_all(i,ind)); % baseline period stdev
    zall(i,:)=(Y_dF_all(i,:) - zb)/zsd; % Z score per bin
end

% Standard error of the z-score
zerror = std(zall)/sqrt(size(zall,1));

% Plot heat map
subplot(3,1,2);
imagesc(ts2, 1, zall);
colormap('jet'); % c1 = colorbar; 
title(sprintf('Z-Score Heat Map', numel(data.streams.(STREAM_STORE1).filtered), numArtifacts),'FontSize', 14);
ylabel('Trials', 'FontSize', 12);

% Fill band values for second subplot. Doing here to scale onset bar
% correctly
XX = [ts2, fliplr(ts2)];
YY = [mean(zall)-zerror, fliplr(mean(zall)+zerror)];

subplot(3,1,3)
plot(ts2, mean(zall), 'color',[0.8500, 0.3250, 0.0980], 'LineWidth', 3); hold on;
line([0 0], [min(YY*1.5), max(YY*1.5)], 'Color', [.7 .7 .7], 'LineWidth', 2)

h = fill(XX, YY, 'r');
set(h, 'facealpha',.25,'edgecolor','none')

% Finish up the plot
axis tight
xlabel('Time, s','FontSize',12)
ylabel('Z-score', 'FontSize', 12)
title(sprintf('470 nm Z-Score: Reward', numel(data.streams.(STREAM_STORE1).filtered), numArtifacts),'FontSize', 14)
%c2 = colorbar;
%%
figure(2)
plot(ts2, zall)
line([0 0], [min(YY*1.5), max(YY*1.5)], 'Color', [.7 .7 .7], 'LineWidth', 2)

% Finish up the plot
axis tight
xlabel('Time, s','FontSize',12)
ylabel('Z-score', 'FontSize', 12)
title(sprintf('470 nm Z-Score: Reward', numel(data.streams.(STREAM_STORE1).filtered), numArtifacts),'FontSize', 14)

%%
figure(3)
fig3_subplot=subplot(2,3,[1,2,4,5])
plot(ts2, mean(zall), 'color',[0.4660, 0.6740, 0.1880], 'LineWidth', 2); hold on; %0.8500, 0.3250, 0.0980 %for data line 0.4660, 0.6740, 0.1880
line([0 0], [min(YY*1.5), max(YY*1.5)], 'Color', [.7 .7 .7], 'LineWidth', 2) %for vertical line

h = fill(XX, YY, [0.4660, 0.6740, 0.1880]);%[0.173, 0.221, 0.142]);%[0.688, 0.7, 0.7]);%[0.6 0.84 0.99]);
set(h, 'facealpha',.20,'edgecolor','none')%.25

% Finish up the plot
axis tight
xlabel('Time, s','FontSize',18)
ylabel('Z-score +/- SEM', 'FontSize', 18)
title(sprintf('whole session average', numel(data.streams.(STREAM_STORE1).filtered), numArtifacts),'FontSize', 18)
box off

subplot(2,3,6);
imagesc(ts2, 1, zall);
colormap('jet'); colorbar; 
caxis([-2 10]);
title(sprintf('Z-Score/Trial', numel(data.streams.(STREAM_STORE1).filtered), numArtifacts),'FontSize', 16);
xlabel('Time, s', 'FontSize', 12);
ylabel('Trial', 'FontSize', 12);

%Fill band values for second subplot. Doing here to scale onset bar correctly
XX = [ts2, fliplr(ts2)];
YY = [mean(zall)-zerror, fliplr(mean(zall)+zerror)];

%% Quantify changes as area under the curve for cue (-10 sec) and reward (0 sec)
%Finds AUC within the 2 seconds after cue insertion and 2 seconds after reward
%delivery

AUC_CS=trapz(abs(mean(zall(:,ts2(1,:) > -10 & ts2(1,:) < -8))));
AUC_US=trapz(abs(mean(zall(:,ts2(1,:) > 0 & ts2(1,:) < 2))));
AUC_int_CS = trapz(abs(mean(zall(:,ts2(1,:) > -10 & ts2(1,:) < 0)))); %Finds AUC during cue interaction period
AUC_CS
AUC_US
AUC_int_CS
%% Plot both unprocessed demodulated data streams
time = (1:length(data.streams.(STREAM_STORE1).data));
figure('Position',[100, 100, 800, 400])
hold on;
p1 = plot(time, data.streams.(STREAM_STORE1).data,'color','r','LineWidth',2);
p2 = plot(time, data.streams.(STREAM_STORE2).data,'color','g','LineWidth',2)
title('Raw Demodulated Responses','fontsize',16);
ylabel('mV','fontsize',16);
axis tight;
